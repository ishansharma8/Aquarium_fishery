const int sensor_temp = A2; // Assigning analog pin A5 to variable 'sensor'
float tempc; //variable to store temperature in degree Celsius
float tempf; //variable to store temperature in Fahreinheit
float vout; //temporary variable to hold sensor reading

 
#include <Arduino.h>              //oxygen_dissolved_sensor
#define VREF    5000//VREF(mv)
#define ADC_RES 1024//ADC Resolution
uint32_t raw;

int sensorPin = A0;//turbidity

#include <DFRobot_EC.h>//ec sensor
#include <EEPROM.h>    //
#define EC_PIN A1
float voltage,ecValue,temperature = 25;
DFRobot_EC ec;
 

#define VOLTAGE 5.00    //system voltage
#define OFFSET 0        //zero drift voltage
#define LED 13         //operating instructions

double orpValue;

#define ArrayLenth  40    //times of collection
#define orpPin 1          //orp meter output,connect to Arduino controller ADC pin
const int sensor = A1; // Assigning analog pin A5 to variable 'sensor'
#define SensorPin 3          // the pH meter Analog output is connected with the Arduinoâ€™s Analog
unsigned long int avgValue;  //Store the average value of the sensor feedback
float b;
int buf[10],temp;

volatile int flow_frequency; // Measures flow sensor pulses
unsigned int l_hour; // Calculated litres/hour
unsigned char flowsensor = 2; // Sensor Input
unsigned long currentTime;
unsigned long cloopTime;
void flow () // Interrupt function
{
   flow_frequency++;
}


void setup() {

  ec.begin();//  ec sensor
  pinMode(sensor_temp, INPUT); // Configuring sensor pin as input

  

  pinMode(sensor, INPUT); // Configuring sensor pin as input

  Serial.begin(9600);  //flow
  pinMode(flowsensor, INPUT);
   digitalWrite(flowsensor, HIGH); // Optional Internal Pull-Up
   Serial.begin(9600);
   attachInterrupt(0, flow, RISING); // Setup Interrupt
   sei(); // Enable interrupts
   currentTime = millis();
   cloopTime = currentTime;
  pinMode(13,OUTPUT);  
  Serial.begin(9600);  
  Serial.println("Ready");    //Test the serial monitor

}

void flow1()
 {
   currentTime = millis();
   // Every second, calculate and print litres/hour
   if(currentTime >= (cloopTime + 1000))
   {
      cloopTime = currentTime; // Updates cloopTime
      // Pulse frequency (Hz) = 7.5Q, Q is flow rate in L/min.
      l_hour = (flow_frequency * 60 / 7.5); // (Pulse frequency x 60 min) / 7.5Q = flowrate in L/hour
      flow_frequency = 0; // Reset Counter
      Serial.print(l_hour, DEC); // Print litres/hour
      Serial.println(" L/hour");
   }
 }


void tempsensor() {

  vout = analogRead(sensor_temp); //Reading the value from sensor

  vout = (vout * 500) / 1023;

  tempc = vout; // Storing value in Degree Celsius

  tempf = (vout * 1.8) + 32; // Converting to Fahrenheit

  //Serial.print("in DegreeC=");

  //Serial.print("\t");

  Serial.print(tempc);

  //Serial.print(" ");

  Serial.print("in Fahrenheit=");

  //Serial.print("\t");

  Serial.print(tempf);

  //Serial.println();

  delay(500); //Delay of 1 second for ease of viewing
}




// float tempc; //variable to store temperature in degree Celsius

// float tempf; //variable to store temperature in Fahreinheit

// float vout; //temporary variable to hold sensor reading

int orpArray[ArrayLenth];
int orpArrayIndex = 0;


double avergearray(int* arr, int number) {
  int i;
  int max, min;
  double avg;
  long amount = 0;
  if (number <= 0) {
    printf("Error number for the array to avraging!/n");
    return 0;
  }
  if (number < 5) { //less than 5, calculated directly statistics
    for (i = 0; i < number; i++) {
      amount += arr[i];
    }
    avg = amount / number;
    return avg;
  } else {
    if (arr[0] < arr[1]) {
      min = arr[0]; max = arr[1];
    }
    else {
      min = arr[1]; max = arr[0];
    }
    for (i = 2; i < number; i++) {
      if (arr[i] < min) {
        amount += min;      //arr<min
        min = arr[i];
      } else {
        if (arr[i] > max) {
          amount += max;  //arr>max
          max = arr[i];
        } else {
          amount += arr[i]; //min<=arr<=max
        }
      }//if
    }//for
    avg = (double)amount / (number - 2);
  }//if
  return avg;
}


// void setup(void) {
//   Serial.begin(9600);
//   pinMode(LED, OUTPUT);
// }

void orp(void) {
  static unsigned long orpTimer = millis(); //analog sampling interval
  static unsigned long printTime = millis();
  if (millis() >= orpTimer)
  {
    orpTimer = millis() + 20;
    orpArray[orpArrayIndex++] = analogRead(orpPin);  //read an analog value every 20ms
    if (orpArrayIndex == ArrayLenth) {
      orpArrayIndex = 0;
    }
    orpValue = ((30 * (double)VOLTAGE * 1000) - (75 * avergearray(orpArray, ArrayLenth) * VOLTAGE * 1000 / 1024)) / 75 - OFFSET;

    //convert the analog value to orp according the circuit
  }
  if (millis() >= printTime)  //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
  {
    printTime = millis() + 800;
    Serial.print("ORP: ");
    Serial.print((int)orpValue);
    Serial.println("mV");
    digitalWrite(LED, 1 - digitalRead(LED));
  }
}

void ph()
{
  for(int i=0;i<10;i++)       //Get 10 sample value from the sensor for smooth the value
  { 
    buf[i]=analogRead(SensorPin);
    delay(10);
  }
  for(int i=0;i<9;i++)        //sort the analog from small to large
  {
    for(int j=i+1;j<10;j++)
    {
      if(buf[i]>buf[j])
      {
        temp=buf[i];
        buf[i]=buf[j];
        buf[j]=temp;
      }
    }
  }
  avgValue=0;
  for(int i=2;i<8;i++)                      //take the average value of 6 center sample
    avgValue+=buf[i];
  float phValue=(float)avgValue*5.0/1024/6; //convert the analog into millivolt
  phValue=3.5*phValue;                      //convert the millivolt into pH value
  Serial.print("    pH:");  
  Serial.print(phValue,2);
  Serial.println(" ");
  digitalWrite(13, HIGH);       
  delay(800);
  digitalWrite(13, LOW); 
  
}

void turbidity() {
  int sensorValue = analogRead(sensorPin);
  int turbidity = map(sensorValue, 0,640, 100, 0);
  Serial.print("Turbidity:");
  Serial.println(turbidity);
  delay(100);
}
void ec_sensor()
{      

    
    static unsigned long timepoint = millis();
    if(millis()-timepoint>1000U)  //time interval: 1s
    {
      timepoint = millis();
      voltage = analogRead(EC_PIN)/1024.0*5000;   // read the voltage
      //temperature = readTemperature();          // read your temperature sensor to execute temperature compensation
      ecValue =  ec.readEC(voltage,tempc);  // convert voltage to EC with temperature compensation
      Serial.print("temperature:");
      Serial.print(temperature,1);
      Serial.print("^C  EC:");
      Serial.print(ecValue,2);
      Serial.println("ms/cm");
    }
    ec.calibration(voltage,temperature);          // calibration process by Serail CMD
}
 
void oxygensensor()
{
    raw=analogRead(A0);
    Serial.println("raw:\t"+String(raw)+"\tVoltage(mv)"+String(raw*VREF/ADC_RES));
    delay(1000);
}




void loop() {

  tempsensor();
  orp();
  flow1();
  ph();
  turbidity();
  ec_sensor();
  oxygensensor();
  delay(1000);

}

